// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: head.proto

package protocol

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// 客户端信息
type ClientInfo struct {
	AppName              string   `protobuf:"bytes,1,opt,name=AppName,proto3" json:"AppName,omitempty"`
	AppId                int32    `protobuf:"varint,2,opt,name=AppId,proto3" json:"AppId,omitempty"`
	VersionName          string   `protobuf:"bytes,3,opt,name=VersionName,proto3" json:"VersionName,omitempty"`
	VersionCode          int32    `protobuf:"varint,4,opt,name=VersionCode,proto3" json:"VersionCode,omitempty"`
	Channel              string   `protobuf:"bytes,5,opt,name=Channel,proto3" json:"Channel,omitempty"`
	Media                string   `protobuf:"bytes,6,opt,name=Media,proto3" json:"Media,omitempty"`
	Platform             string   `protobuf:"bytes,7,opt,name=Platform,proto3" json:"Platform,omitempty"`
	Device               string   `protobuf:"bytes,8,opt,name=Device,proto3" json:"Device,omitempty"`
	OaId                 string   `protobuf:"bytes,9,opt,name=OaId,proto3" json:"OaId,omitempty"`
	Custom               string   `protobuf:"bytes,10,opt,name=Custom,proto3" json:"Custom,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientInfo) Reset()         { *m = ClientInfo{} }
func (m *ClientInfo) String() string { return proto.CompactTextString(m) }
func (*ClientInfo) ProtoMessage()    {}
func (*ClientInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d0bdc0adf338bad, []int{0}
}
func (m *ClientInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientInfo.Merge(m, src)
}
func (m *ClientInfo) XXX_Size() int {
	return m.Size()
}
func (m *ClientInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ClientInfo proto.InternalMessageInfo

func (m *ClientInfo) GetAppName() string {
	if m != nil {
		return m.AppName
	}
	return ""
}

func (m *ClientInfo) GetAppId() int32 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *ClientInfo) GetVersionName() string {
	if m != nil {
		return m.VersionName
	}
	return ""
}

func (m *ClientInfo) GetVersionCode() int32 {
	if m != nil {
		return m.VersionCode
	}
	return 0
}

func (m *ClientInfo) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *ClientInfo) GetMedia() string {
	if m != nil {
		return m.Media
	}
	return ""
}

func (m *ClientInfo) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *ClientInfo) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *ClientInfo) GetOaId() string {
	if m != nil {
		return m.OaId
	}
	return ""
}

func (m *ClientInfo) GetCustom() string {
	if m != nil {
		return m.Custom
	}
	return ""
}

// 请求
type ToucanRequest struct {
	CliInfo              *ClientInfo `protobuf:"bytes,1,opt,name=CliInfo,proto3" json:"CliInfo,omitempty"`
	Token                string      `protobuf:"bytes,2,opt,name=Token,proto3" json:"Token,omitempty"`
	CliTime              int64       `protobuf:"varint,3,opt,name=CliTime,proto3" json:"CliTime,omitempty"`
	MessageId            int32       `protobuf:"varint,4,opt,name=MessageId,proto3" json:"MessageId,omitempty"`
	DataLen              int32       `protobuf:"varint,5,opt,name=DataLen,proto3" json:"DataLen,omitempty"`
	Data                 []byte      `protobuf:"bytes,6,opt,name=Data,proto3" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ToucanRequest) Reset()         { *m = ToucanRequest{} }
func (m *ToucanRequest) String() string { return proto.CompactTextString(m) }
func (*ToucanRequest) ProtoMessage()    {}
func (*ToucanRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d0bdc0adf338bad, []int{1}
}
func (m *ToucanRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ToucanRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ToucanRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ToucanRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ToucanRequest.Merge(m, src)
}
func (m *ToucanRequest) XXX_Size() int {
	return m.Size()
}
func (m *ToucanRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ToucanRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ToucanRequest proto.InternalMessageInfo

func (m *ToucanRequest) GetCliInfo() *ClientInfo {
	if m != nil {
		return m.CliInfo
	}
	return nil
}

func (m *ToucanRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *ToucanRequest) GetCliTime() int64 {
	if m != nil {
		return m.CliTime
	}
	return 0
}

func (m *ToucanRequest) GetMessageId() int32 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *ToucanRequest) GetDataLen() int32 {
	if m != nil {
		return m.DataLen
	}
	return 0
}

func (m *ToucanRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type ToucanBody struct {
	MessageId            int32    `protobuf:"varint,1,opt,name=MessageId,proto3" json:"MessageId,omitempty"`
	DataLen              int32    `protobuf:"varint,2,opt,name=DataLen,proto3" json:"DataLen,omitempty"`
	Data                 []byte   `protobuf:"bytes,3,opt,name=Data,proto3" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ToucanBody) Reset()         { *m = ToucanBody{} }
func (m *ToucanBody) String() string { return proto.CompactTextString(m) }
func (*ToucanBody) ProtoMessage()    {}
func (*ToucanBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d0bdc0adf338bad, []int{2}
}
func (m *ToucanBody) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ToucanBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ToucanBody.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ToucanBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ToucanBody.Merge(m, src)
}
func (m *ToucanBody) XXX_Size() int {
	return m.Size()
}
func (m *ToucanBody) XXX_DiscardUnknown() {
	xxx_messageInfo_ToucanBody.DiscardUnknown(m)
}

var xxx_messageInfo_ToucanBody proto.InternalMessageInfo

func (m *ToucanBody) GetMessageId() int32 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *ToucanBody) GetDataLen() int32 {
	if m != nil {
		return m.DataLen
	}
	return 0
}

func (m *ToucanBody) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// 回复
type ToucanResponse struct {
	RetCode              int32         `protobuf:"varint,1,opt,name=RetCode,proto3" json:"RetCode,omitempty"`
	RetMsg               string        `protobuf:"bytes,2,opt,name=RetMsg,proto3" json:"RetMsg,omitempty"`
	CliTime              int64         `protobuf:"varint,3,opt,name=CliTime,proto3" json:"CliTime,omitempty"`
	SvrTime              int64         `protobuf:"varint,4,opt,name=SvrTime,proto3" json:"SvrTime,omitempty"`
	Bodies               []*ToucanBody `protobuf:"bytes,5,rep,name=Bodies,proto3" json:"Bodies,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ToucanResponse) Reset()         { *m = ToucanResponse{} }
func (m *ToucanResponse) String() string { return proto.CompactTextString(m) }
func (*ToucanResponse) ProtoMessage()    {}
func (*ToucanResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d0bdc0adf338bad, []int{3}
}
func (m *ToucanResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ToucanResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ToucanResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ToucanResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ToucanResponse.Merge(m, src)
}
func (m *ToucanResponse) XXX_Size() int {
	return m.Size()
}
func (m *ToucanResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ToucanResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ToucanResponse proto.InternalMessageInfo

func (m *ToucanResponse) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *ToucanResponse) GetRetMsg() string {
	if m != nil {
		return m.RetMsg
	}
	return ""
}

func (m *ToucanResponse) GetCliTime() int64 {
	if m != nil {
		return m.CliTime
	}
	return 0
}

func (m *ToucanResponse) GetSvrTime() int64 {
	if m != nil {
		return m.SvrTime
	}
	return 0
}

func (m *ToucanResponse) GetBodies() []*ToucanBody {
	if m != nil {
		return m.Bodies
	}
	return nil
}

func init() {
	proto.RegisterType((*ClientInfo)(nil), "msg.ClientInfo")
	proto.RegisterType((*ToucanRequest)(nil), "msg.ToucanRequest")
	proto.RegisterType((*ToucanBody)(nil), "msg.ToucanBody")
	proto.RegisterType((*ToucanResponse)(nil), "msg.ToucanResponse")
}

func init() { proto.RegisterFile("head.proto", fileDescriptor_1d0bdc0adf338bad) }

var fileDescriptor_1d0bdc0adf338bad = []byte{
	// 422 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xcd, 0x6e, 0x13, 0x31,
	0x10, 0x80, 0x71, 0x36, 0x9b, 0x9f, 0x29, 0x3f, 0x92, 0x85, 0x90, 0x55, 0xa1, 0x28, 0xca, 0x85,
	0x72, 0xc9, 0x01, 0x9e, 0xa0, 0xd9, 0x5e, 0x22, 0x11, 0x40, 0x26, 0x42, 0x88, 0x9b, 0xc9, 0x4e,
	0x53, 0x8b, 0x5d, 0x7b, 0x89, 0x9d, 0x4a, 0xbc, 0x05, 0x47, 0x6e, 0xbc, 0x05, 0xcf, 0xc0, 0x91,
	0x47, 0x40, 0xe1, 0x45, 0x90, 0xc7, 0xde, 0x66, 0x91, 0xaa, 0xde, 0xe6, 0x9b, 0xf1, 0x8c, 0x77,
	0x3e, 0x2f, 0xc0, 0x15, 0xaa, 0x72, 0xde, 0xec, 0xac, 0xb7, 0x3c, 0xab, 0xdd, 0x76, 0xf6, 0xad,
	0x07, 0x50, 0x54, 0x1a, 0x8d, 0x5f, 0x9a, 0x4b, 0xcb, 0x05, 0x0c, 0xcf, 0x9b, 0xe6, 0xb5, 0xaa,
	0x51, 0xb0, 0x29, 0x3b, 0x1b, 0xcb, 0x16, 0xf9, 0x63, 0xc8, 0xcf, 0x9b, 0x66, 0x59, 0x8a, 0xde,
	0x94, 0x9d, 0xe5, 0x32, 0x02, 0x9f, 0xc2, 0xc9, 0x7b, 0xdc, 0x39, 0x6d, 0x0d, 0xf5, 0x64, 0xd4,
	0xd3, 0x4d, 0x75, 0x4e, 0x14, 0xb6, 0x44, 0xd1, 0xa7, 0xee, 0x6e, 0x2a, 0xdc, 0x59, 0x5c, 0x29,
	0x63, 0xb0, 0x12, 0x79, 0xbc, 0x33, 0x61, 0xb8, 0x73, 0x85, 0xa5, 0x56, 0x62, 0x40, 0xf9, 0x08,
	0xfc, 0x14, 0x46, 0x6f, 0x2b, 0xe5, 0x2f, 0xed, 0xae, 0x16, 0x43, 0x2a, 0xdc, 0x30, 0x7f, 0x02,
	0x83, 0x0b, 0xbc, 0xd6, 0x1b, 0x14, 0x23, 0xaa, 0x24, 0xe2, 0x1c, 0xfa, 0x6f, 0xd4, 0xb2, 0x14,
	0x63, 0xca, 0x52, 0x1c, 0xce, 0x16, 0x7b, 0xe7, 0x6d, 0x2d, 0x20, 0x9e, 0x8d, 0x34, 0xfb, 0xc9,
	0xe0, 0xc1, 0xda, 0xee, 0x37, 0xca, 0x48, 0xfc, 0xb2, 0x47, 0xe7, 0xf9, 0x73, 0x18, 0x16, 0x95,
	0x0e, 0x82, 0xc8, 0xca, 0xc9, 0x8b, 0x47, 0xf3, 0xda, 0x6d, 0xe7, 0x47, 0x6f, 0xb2, 0xad, 0x87,
	0x4f, 0x5e, 0xdb, 0xcf, 0x68, 0x48, 0xd3, 0x58, 0x46, 0xa0, 0x15, 0x2b, 0xbd, 0xd6, 0x49, 0x51,
	0x26, 0x5b, 0xe4, 0x4f, 0x61, 0xbc, 0x42, 0xe7, 0xd4, 0x16, 0x97, 0x65, 0x92, 0x73, 0x4c, 0x84,
	0xbe, 0x0b, 0xe5, 0xd5, 0x2b, 0x34, 0xa4, 0x26, 0x97, 0x2d, 0x86, 0x85, 0x42, 0x48, 0x66, 0xee,
	0x4b, 0x8a, 0x67, 0x1f, 0x00, 0xe2, 0x77, 0x2f, 0x6c, 0xf9, 0xf5, 0xff, 0xc9, 0xec, 0x8e, 0xc9,
	0xbd, 0xdb, 0x27, 0x67, 0x9d, 0xc9, 0x3f, 0x18, 0x3c, 0x6c, 0x95, 0xb8, 0xc6, 0x1a, 0x47, 0xaf,
	0x26, 0xd1, 0xd3, 0x9b, 0xc6, 0xe1, 0x2d, 0x06, 0xaf, 0x12, 0xfd, 0xca, 0x6d, 0x93, 0x83, 0x44,
	0x77, 0x48, 0x10, 0x30, 0x7c, 0x77, 0xbd, 0xa3, 0x4a, 0x3f, 0x56, 0x12, 0xf2, 0x67, 0x30, 0x58,
	0xd8, 0x52, 0xa3, 0x13, 0xf9, 0x34, 0xbb, 0x11, 0x7f, 0xdc, 0x52, 0xa6, 0xf2, 0xe2, 0xf4, 0xd7,
	0x61, 0xc2, 0x7e, 0x1f, 0x26, 0xec, 0xcf, 0x61, 0xc2, 0xbe, 0xff, 0x9d, 0xdc, 0xfb, 0x38, 0xa2,
	0xbf, 0x7c, 0x63, 0xab, 0x4f, 0x03, 0x8a, 0x5e, 0xfe, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xaa, 0xee,
	0x71, 0x4a, 0xfd, 0x02, 0x00, 0x00,
}

func (m *ClientInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Custom) > 0 {
		i -= len(m.Custom)
		copy(dAtA[i:], m.Custom)
		i = encodeVarintHead(dAtA, i, uint64(len(m.Custom)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.OaId) > 0 {
		i -= len(m.OaId)
		copy(dAtA[i:], m.OaId)
		i = encodeVarintHead(dAtA, i, uint64(len(m.OaId)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Device) > 0 {
		i -= len(m.Device)
		copy(dAtA[i:], m.Device)
		i = encodeVarintHead(dAtA, i, uint64(len(m.Device)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Platform) > 0 {
		i -= len(m.Platform)
		copy(dAtA[i:], m.Platform)
		i = encodeVarintHead(dAtA, i, uint64(len(m.Platform)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Media) > 0 {
		i -= len(m.Media)
		copy(dAtA[i:], m.Media)
		i = encodeVarintHead(dAtA, i, uint64(len(m.Media)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Channel) > 0 {
		i -= len(m.Channel)
		copy(dAtA[i:], m.Channel)
		i = encodeVarintHead(dAtA, i, uint64(len(m.Channel)))
		i--
		dAtA[i] = 0x2a
	}
	if m.VersionCode != 0 {
		i = encodeVarintHead(dAtA, i, uint64(m.VersionCode))
		i--
		dAtA[i] = 0x20
	}
	if len(m.VersionName) > 0 {
		i -= len(m.VersionName)
		copy(dAtA[i:], m.VersionName)
		i = encodeVarintHead(dAtA, i, uint64(len(m.VersionName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AppId != 0 {
		i = encodeVarintHead(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AppName) > 0 {
		i -= len(m.AppName)
		copy(dAtA[i:], m.AppName)
		i = encodeVarintHead(dAtA, i, uint64(len(m.AppName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ToucanRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ToucanRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ToucanRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintHead(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x32
	}
	if m.DataLen != 0 {
		i = encodeVarintHead(dAtA, i, uint64(m.DataLen))
		i--
		dAtA[i] = 0x28
	}
	if m.MessageId != 0 {
		i = encodeVarintHead(dAtA, i, uint64(m.MessageId))
		i--
		dAtA[i] = 0x20
	}
	if m.CliTime != 0 {
		i = encodeVarintHead(dAtA, i, uint64(m.CliTime))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintHead(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x12
	}
	if m.CliInfo != nil {
		{
			size, err := m.CliInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHead(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ToucanBody) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ToucanBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ToucanBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintHead(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x1a
	}
	if m.DataLen != 0 {
		i = encodeVarintHead(dAtA, i, uint64(m.DataLen))
		i--
		dAtA[i] = 0x10
	}
	if m.MessageId != 0 {
		i = encodeVarintHead(dAtA, i, uint64(m.MessageId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ToucanResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ToucanResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ToucanResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Bodies) > 0 {
		for iNdEx := len(m.Bodies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bodies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHead(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.SvrTime != 0 {
		i = encodeVarintHead(dAtA, i, uint64(m.SvrTime))
		i--
		dAtA[i] = 0x20
	}
	if m.CliTime != 0 {
		i = encodeVarintHead(dAtA, i, uint64(m.CliTime))
		i--
		dAtA[i] = 0x18
	}
	if len(m.RetMsg) > 0 {
		i -= len(m.RetMsg)
		copy(dAtA[i:], m.RetMsg)
		i = encodeVarintHead(dAtA, i, uint64(len(m.RetMsg)))
		i--
		dAtA[i] = 0x12
	}
	if m.RetCode != 0 {
		i = encodeVarintHead(dAtA, i, uint64(m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintHead(dAtA []byte, offset int, v uint64) int {
	offset -= sovHead(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ClientInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AppName)
	if l > 0 {
		n += 1 + l + sovHead(uint64(l))
	}
	if m.AppId != 0 {
		n += 1 + sovHead(uint64(m.AppId))
	}
	l = len(m.VersionName)
	if l > 0 {
		n += 1 + l + sovHead(uint64(l))
	}
	if m.VersionCode != 0 {
		n += 1 + sovHead(uint64(m.VersionCode))
	}
	l = len(m.Channel)
	if l > 0 {
		n += 1 + l + sovHead(uint64(l))
	}
	l = len(m.Media)
	if l > 0 {
		n += 1 + l + sovHead(uint64(l))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovHead(uint64(l))
	}
	l = len(m.Device)
	if l > 0 {
		n += 1 + l + sovHead(uint64(l))
	}
	l = len(m.OaId)
	if l > 0 {
		n += 1 + l + sovHead(uint64(l))
	}
	l = len(m.Custom)
	if l > 0 {
		n += 1 + l + sovHead(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ToucanRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CliInfo != nil {
		l = m.CliInfo.Size()
		n += 1 + l + sovHead(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovHead(uint64(l))
	}
	if m.CliTime != 0 {
		n += 1 + sovHead(uint64(m.CliTime))
	}
	if m.MessageId != 0 {
		n += 1 + sovHead(uint64(m.MessageId))
	}
	if m.DataLen != 0 {
		n += 1 + sovHead(uint64(m.DataLen))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovHead(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ToucanBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MessageId != 0 {
		n += 1 + sovHead(uint64(m.MessageId))
	}
	if m.DataLen != 0 {
		n += 1 + sovHead(uint64(m.DataLen))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovHead(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ToucanResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != 0 {
		n += 1 + sovHead(uint64(m.RetCode))
	}
	l = len(m.RetMsg)
	if l > 0 {
		n += 1 + l + sovHead(uint64(l))
	}
	if m.CliTime != 0 {
		n += 1 + sovHead(uint64(m.CliTime))
	}
	if m.SvrTime != 0 {
		n += 1 + sovHead(uint64(m.SvrTime))
	}
	if len(m.Bodies) > 0 {
		for _, e := range m.Bodies {
			l = e.Size()
			n += 1 + l + sovHead(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovHead(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozHead(x uint64) (n int) {
	return sovHead(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ClientInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHead
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHead
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHead
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHead
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHead
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHead
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHead
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHead
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VersionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionCode", wireType)
			}
			m.VersionCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHead
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VersionCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHead
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHead
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHead
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Media", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHead
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHead
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHead
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Media = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHead
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHead
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHead
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHead
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHead
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHead
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Device = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OaId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHead
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHead
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHead
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OaId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Custom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHead
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHead
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHead
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Custom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHead(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHead
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ToucanRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHead
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ToucanRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ToucanRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CliInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHead
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHead
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHead
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CliInfo == nil {
				m.CliInfo = &ClientInfo{}
			}
			if err := m.CliInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHead
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHead
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHead
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CliTime", wireType)
			}
			m.CliTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHead
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CliTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHead
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataLen", wireType)
			}
			m.DataLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHead
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataLen |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHead
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHead
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHead
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHead(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHead
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ToucanBody) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHead
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ToucanBody: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ToucanBody: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHead
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataLen", wireType)
			}
			m.DataLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHead
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataLen |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHead
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHead
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHead
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHead(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHead
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ToucanResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHead
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ToucanResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ToucanResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			m.RetCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHead
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHead
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHead
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHead
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RetMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CliTime", wireType)
			}
			m.CliTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHead
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CliTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvrTime", wireType)
			}
			m.SvrTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHead
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SvrTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bodies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHead
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHead
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHead
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bodies = append(m.Bodies, &ToucanBody{})
			if err := m.Bodies[len(m.Bodies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHead(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHead
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHead(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHead
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHead
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHead
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHead
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupHead
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthHead
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthHead        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHead          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupHead = fmt.Errorf("proto: unexpected end of group")
)
