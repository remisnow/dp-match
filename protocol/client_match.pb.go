// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: client_match.proto

package protocol

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MatchReq struct {
	GameMode             int32    `protobuf:"varint,1,opt,name=GameMode,proto3" json:"GameMode,omitempty"`
	Extra                string   `protobuf:"bytes,2,opt,name=Extra,proto3" json:"Extra,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MatchReq) Reset()         { *m = MatchReq{} }
func (m *MatchReq) String() string { return proto.CompactTextString(m) }
func (*MatchReq) ProtoMessage()    {}
func (*MatchReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f684fdd0205cb49, []int{0}
}
func (m *MatchReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MatchReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MatchReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MatchReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchReq.Merge(m, src)
}
func (m *MatchReq) XXX_Size() int {
	return m.Size()
}
func (m *MatchReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchReq.DiscardUnknown(m)
}

var xxx_messageInfo_MatchReq proto.InternalMessageInfo

func (m *MatchReq) GetGameMode() int32 {
	if m != nil {
		return m.GameMode
	}
	return 0
}

func (m *MatchReq) GetExtra() string {
	if m != nil {
		return m.Extra
	}
	return ""
}

type MatchResp struct {
	RetCode              int32    `protobuf:"varint,1,opt,name=RetCode,proto3" json:"RetCode,omitempty"`
	Address              string   `protobuf:"bytes,2,opt,name=Address,proto3" json:"Address,omitempty"`
	TicketId             string   `protobuf:"bytes,3,opt,name=TicketId,proto3" json:"TicketId,omitempty"`
	Rand                 int32    `protobuf:"varint,4,opt,name=Rand,proto3" json:"Rand,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MatchResp) Reset()         { *m = MatchResp{} }
func (m *MatchResp) String() string { return proto.CompactTextString(m) }
func (*MatchResp) ProtoMessage()    {}
func (*MatchResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f684fdd0205cb49, []int{1}
}
func (m *MatchResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MatchResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MatchResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MatchResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchResp.Merge(m, src)
}
func (m *MatchResp) XXX_Size() int {
	return m.Size()
}
func (m *MatchResp) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchResp.DiscardUnknown(m)
}

var xxx_messageInfo_MatchResp proto.InternalMessageInfo

func (m *MatchResp) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *MatchResp) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *MatchResp) GetTicketId() string {
	if m != nil {
		return m.TicketId
	}
	return ""
}

func (m *MatchResp) GetRand() int32 {
	if m != nil {
		return m.Rand
	}
	return 0
}

func init() {
	proto.RegisterType((*MatchReq)(nil), "Msg.MatchReq")
	proto.RegisterType((*MatchResp)(nil), "Msg.MatchResp")
}

func init() { proto.RegisterFile("client_match.proto", fileDescriptor_8f684fdd0205cb49) }

var fileDescriptor_8f684fdd0205cb49 = []byte{
	// 190 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4a, 0xce, 0xc9, 0x4c,
	0xcd, 0x2b, 0x89, 0xcf, 0x4d, 0x2c, 0x49, 0xce, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62,
	0xf6, 0x2d, 0x4e, 0x57, 0xb2, 0xe1, 0xe2, 0xf0, 0x05, 0x89, 0x05, 0xa5, 0x16, 0x0a, 0x49, 0x71,
	0x71, 0xb8, 0x27, 0xe6, 0xa6, 0xfa, 0xe6, 0xa7, 0xa4, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0xb0, 0x06,
	0xc1, 0xf9, 0x42, 0x22, 0x5c, 0xac, 0xae, 0x15, 0x25, 0x45, 0x89, 0x12, 0x4c, 0x0a, 0x8c, 0x1a,
	0x9c, 0x41, 0x10, 0x8e, 0x52, 0x3e, 0x17, 0x27, 0x54, 0x77, 0x71, 0x81, 0x90, 0x04, 0x17, 0x7b,
	0x50, 0x6a, 0x89, 0x33, 0x42, 0x37, 0x8c, 0x0b, 0x92, 0x71, 0x4c, 0x49, 0x29, 0x4a, 0x2d, 0x2e,
	0x86, 0x6a, 0x87, 0x71, 0x41, 0x56, 0x86, 0x64, 0x26, 0x67, 0xa7, 0x96, 0x78, 0xa6, 0x48, 0x30,
	0x83, 0xa5, 0xe0, 0x7c, 0x21, 0x21, 0x2e, 0x96, 0xa0, 0xc4, 0xbc, 0x14, 0x09, 0x16, 0xb0, 0x61,
	0x60, 0xb6, 0x93, 0xd4, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7,
	0x38, 0xe3, 0xb1, 0x1c, 0x43, 0x14, 0x07, 0xd8, 0x33, 0xc9, 0xf9, 0x39, 0x49, 0x6c, 0x60, 0x96,
	0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xfd, 0x90, 0x23, 0xe6, 0xec, 0x00, 0x00, 0x00,
}

func (m *MatchReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MatchReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MatchReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Extra) > 0 {
		i -= len(m.Extra)
		copy(dAtA[i:], m.Extra)
		i = encodeVarintClientMatch(dAtA, i, uint64(len(m.Extra)))
		i--
		dAtA[i] = 0x12
	}
	if m.GameMode != 0 {
		i = encodeVarintClientMatch(dAtA, i, uint64(m.GameMode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MatchResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MatchResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MatchResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Rand != 0 {
		i = encodeVarintClientMatch(dAtA, i, uint64(m.Rand))
		i--
		dAtA[i] = 0x20
	}
	if len(m.TicketId) > 0 {
		i -= len(m.TicketId)
		copy(dAtA[i:], m.TicketId)
		i = encodeVarintClientMatch(dAtA, i, uint64(len(m.TicketId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintClientMatch(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.RetCode != 0 {
		i = encodeVarintClientMatch(dAtA, i, uint64(m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintClientMatch(dAtA []byte, offset int, v uint64) int {
	offset -= sovClientMatch(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MatchReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameMode != 0 {
		n += 1 + sovClientMatch(uint64(m.GameMode))
	}
	l = len(m.Extra)
	if l > 0 {
		n += 1 + l + sovClientMatch(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MatchResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != 0 {
		n += 1 + sovClientMatch(uint64(m.RetCode))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovClientMatch(uint64(l))
	}
	l = len(m.TicketId)
	if l > 0 {
		n += 1 + l + sovClientMatch(uint64(l))
	}
	if m.Rand != 0 {
		n += 1 + sovClientMatch(uint64(m.Rand))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovClientMatch(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozClientMatch(x uint64) (n int) {
	return sovClientMatch(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MatchReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MatchReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MatchReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameMode", wireType)
			}
			m.GameMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameMode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientMatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientMatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClientMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClientMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MatchResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MatchResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MatchResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			m.RetCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientMatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientMatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TicketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientMatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientMatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TicketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rand", wireType)
			}
			m.Rand = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rand |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClientMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClientMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipClientMatch(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowClientMatch
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClientMatch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClientMatch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthClientMatch
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupClientMatch
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthClientMatch
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthClientMatch        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowClientMatch          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupClientMatch = fmt.Errorf("proto: unexpected end of group")
)
