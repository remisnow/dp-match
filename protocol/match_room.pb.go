// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: match_room.proto

package protocol

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// 房间服信息同步状态
type RoomServiceState int32

const (
	RoomServiceState_load   RoomServiceState = 0
	RoomServiceState_reload RoomServiceState = 1
	RoomServiceState_heart  RoomServiceState = 2
	RoomServiceState_busy   RoomServiceState = 3
)

var RoomServiceState_name = map[int32]string{
	0: "load",
	1: "reload",
	2: "heart",
	3: "busy",
}

var RoomServiceState_value = map[string]int32{
	"load":   0,
	"reload": 1,
	"heart":  2,
	"busy":   3,
}

func (x RoomServiceState) String() string {
	return proto.EnumName(RoomServiceState_name, int32(x))
}

func (RoomServiceState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1eff161f8634e440, []int{0}
}

// 房间同步
type RoomState int32

const (
	RoomState_RoomHeart   RoomState = 0
	RoomState_RoomDestroy RoomState = 1
	RoomState_RoomUpdate  RoomState = 2
)

var RoomState_name = map[int32]string{
	0: "RoomHeart",
	1: "RoomDestroy",
	2: "RoomUpdate",
}

var RoomState_value = map[string]int32{
	"RoomHeart":   0,
	"RoomDestroy": 1,
	"RoomUpdate":  2,
}

func (x RoomState) String() string {
	return proto.EnumName(RoomState_name, int32(x))
}

func (RoomState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1eff161f8634e440, []int{1}
}

// 创建房间
type CreateRoom struct {
	GameId               int32    `protobuf:"varint,1,opt,name=gameId,proto3" json:"gameId,omitempty"`
	GameMode             int32    `protobuf:"varint,2,opt,name=gameMode,proto3" json:"gameMode,omitempty"`
	RoomId               int64    `protobuf:"varint,3,opt,name=roomId,proto3" json:"roomId,omitempty"`
	Data                 string   `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateRoom) Reset()         { *m = CreateRoom{} }
func (m *CreateRoom) String() string { return proto.CompactTextString(m) }
func (*CreateRoom) ProtoMessage()    {}
func (*CreateRoom) Descriptor() ([]byte, []int) {
	return fileDescriptor_1eff161f8634e440, []int{0}
}
func (m *CreateRoom) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateRoom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateRoom.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateRoom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRoom.Merge(m, src)
}
func (m *CreateRoom) XXX_Size() int {
	return m.Size()
}
func (m *CreateRoom) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRoom.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRoom proto.InternalMessageInfo

func (m *CreateRoom) GetGameId() int32 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *CreateRoom) GetGameMode() int32 {
	if m != nil {
		return m.GameMode
	}
	return 0
}

func (m *CreateRoom) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *CreateRoom) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

// 踢人逻辑
type KickUser struct {
	RoomId               int64    `protobuf:"varint,1,opt,name=roomId,proto3" json:"roomId,omitempty"`
	UserId               int64    `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KickUser) Reset()         { *m = KickUser{} }
func (m *KickUser) String() string { return proto.CompactTextString(m) }
func (*KickUser) ProtoMessage()    {}
func (*KickUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_1eff161f8634e440, []int{1}
}
func (m *KickUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KickUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KickUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KickUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KickUser.Merge(m, src)
}
func (m *KickUser) XXX_Size() int {
	return m.Size()
}
func (m *KickUser) XXX_DiscardUnknown() {
	xxx_messageInfo_KickUser.DiscardUnknown(m)
}

var xxx_messageInfo_KickUser proto.InternalMessageInfo

func (m *KickUser) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *KickUser) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

// 房间服务信息同步
type UpdateRoomService struct {
	ServiceName          string           `protobuf:"bytes,1,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	State                RoomServiceState `protobuf:"varint,2,opt,name=state,proto3,enum=RoomServiceState" json:"state,omitempty"`
	Data                 string           `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *UpdateRoomService) Reset()         { *m = UpdateRoomService{} }
func (m *UpdateRoomService) String() string { return proto.CompactTextString(m) }
func (*UpdateRoomService) ProtoMessage()    {}
func (*UpdateRoomService) Descriptor() ([]byte, []int) {
	return fileDescriptor_1eff161f8634e440, []int{2}
}
func (m *UpdateRoomService) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateRoomService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateRoomService.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateRoomService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRoomService.Merge(m, src)
}
func (m *UpdateRoomService) XXX_Size() int {
	return m.Size()
}
func (m *UpdateRoomService) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRoomService.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRoomService proto.InternalMessageInfo

func (m *UpdateRoomService) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *UpdateRoomService) GetState() RoomServiceState {
	if m != nil {
		return m.State
	}
	return RoomServiceState_load
}

func (m *UpdateRoomService) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

// 玩家进入房间
type UserEnterRoom struct {
	UserId               int64    `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	RoomId               int64    `protobuf:"varint,2,opt,name=roomId,proto3" json:"roomId,omitempty"`
	Error                int64    `protobuf:"varint,3,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserEnterRoom) Reset()         { *m = UserEnterRoom{} }
func (m *UserEnterRoom) String() string { return proto.CompactTextString(m) }
func (*UserEnterRoom) ProtoMessage()    {}
func (*UserEnterRoom) Descriptor() ([]byte, []int) {
	return fileDescriptor_1eff161f8634e440, []int{3}
}
func (m *UserEnterRoom) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserEnterRoom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserEnterRoom.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserEnterRoom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserEnterRoom.Merge(m, src)
}
func (m *UserEnterRoom) XXX_Size() int {
	return m.Size()
}
func (m *UserEnterRoom) XXX_DiscardUnknown() {
	xxx_messageInfo_UserEnterRoom.DiscardUnknown(m)
}

var xxx_messageInfo_UserEnterRoom proto.InternalMessageInfo

func (m *UserEnterRoom) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UserEnterRoom) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *UserEnterRoom) GetError() int64 {
	if m != nil {
		return m.Error
	}
	return 0
}

// 玩家离开房间
type UserLeaveRoom struct {
	UserId               int64    `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	RoomId               int64    `protobuf:"varint,2,opt,name=roomId,proto3" json:"roomId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserLeaveRoom) Reset()         { *m = UserLeaveRoom{} }
func (m *UserLeaveRoom) String() string { return proto.CompactTextString(m) }
func (*UserLeaveRoom) ProtoMessage()    {}
func (*UserLeaveRoom) Descriptor() ([]byte, []int) {
	return fileDescriptor_1eff161f8634e440, []int{4}
}
func (m *UserLeaveRoom) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserLeaveRoom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserLeaveRoom.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserLeaveRoom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserLeaveRoom.Merge(m, src)
}
func (m *UserLeaveRoom) XXX_Size() int {
	return m.Size()
}
func (m *UserLeaveRoom) XXX_DiscardUnknown() {
	xxx_messageInfo_UserLeaveRoom.DiscardUnknown(m)
}

var xxx_messageInfo_UserLeaveRoom proto.InternalMessageInfo

func (m *UserLeaveRoom) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UserLeaveRoom) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

// 创建房间的回包
type CreateRoomBack struct {
	GameId               int32    `protobuf:"varint,1,opt,name=gameId,proto3" json:"gameId,omitempty"`
	GameMode             int32    `protobuf:"varint,2,opt,name=gameMode,proto3" json:"gameMode,omitempty"`
	RoomId               int64    `protobuf:"varint,3,opt,name=roomId,proto3" json:"roomId,omitempty"`
	Error                int32    `protobuf:"varint,4,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateRoomBack) Reset()         { *m = CreateRoomBack{} }
func (m *CreateRoomBack) String() string { return proto.CompactTextString(m) }
func (*CreateRoomBack) ProtoMessage()    {}
func (*CreateRoomBack) Descriptor() ([]byte, []int) {
	return fileDescriptor_1eff161f8634e440, []int{5}
}
func (m *CreateRoomBack) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateRoomBack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateRoomBack.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateRoomBack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRoomBack.Merge(m, src)
}
func (m *CreateRoomBack) XXX_Size() int {
	return m.Size()
}
func (m *CreateRoomBack) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRoomBack.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRoomBack proto.InternalMessageInfo

func (m *CreateRoomBack) GetGameId() int32 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *CreateRoomBack) GetGameMode() int32 {
	if m != nil {
		return m.GameMode
	}
	return 0
}

func (m *CreateRoomBack) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *CreateRoomBack) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

// 通知match服去redis更新数据
type UpdateRoom struct {
	RoomId               int64     `protobuf:"varint,1,opt,name=roomId,proto3" json:"roomId,omitempty"`
	State                RoomState `protobuf:"varint,2,opt,name=state,proto3,enum=RoomState" json:"state,omitempty"`
	Data                 string    `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *UpdateRoom) Reset()         { *m = UpdateRoom{} }
func (m *UpdateRoom) String() string { return proto.CompactTextString(m) }
func (*UpdateRoom) ProtoMessage()    {}
func (*UpdateRoom) Descriptor() ([]byte, []int) {
	return fileDescriptor_1eff161f8634e440, []int{6}
}
func (m *UpdateRoom) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateRoom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateRoom.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateRoom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRoom.Merge(m, src)
}
func (m *UpdateRoom) XXX_Size() int {
	return m.Size()
}
func (m *UpdateRoom) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRoom.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRoom proto.InternalMessageInfo

func (m *UpdateRoom) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *UpdateRoom) GetState() RoomState {
	if m != nil {
		return m.State
	}
	return RoomState_RoomHeart
}

func (m *UpdateRoom) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func init() {
	proto.RegisterEnum("RoomServiceState", RoomServiceState_name, RoomServiceState_value)
	proto.RegisterEnum("RoomState", RoomState_name, RoomState_value)
	proto.RegisterType((*CreateRoom)(nil), "CreateRoom")
	proto.RegisterType((*KickUser)(nil), "KickUser")
	proto.RegisterType((*UpdateRoomService)(nil), "UpdateRoomService")
	proto.RegisterType((*UserEnterRoom)(nil), "UserEnterRoom")
	proto.RegisterType((*UserLeaveRoom)(nil), "UserLeaveRoom")
	proto.RegisterType((*CreateRoomBack)(nil), "CreateRoomBack")
	proto.RegisterType((*UpdateRoom)(nil), "UpdateRoom")
}

func init() { proto.RegisterFile("match_room.proto", fileDescriptor_1eff161f8634e440) }

var fileDescriptor_1eff161f8634e440 = []byte{
	// 396 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x53, 0xcd, 0xca, 0xda, 0x40,
	0x14, 0x75, 0xf2, 0x47, 0x72, 0x45, 0x1b, 0x87, 0x22, 0xc1, 0x45, 0x08, 0xd9, 0x54, 0x5c, 0xb8,
	0x68, 0x77, 0x2d, 0xa5, 0x60, 0x5b, 0xa8, 0xf4, 0x67, 0x11, 0x71, 0xe3, 0xa6, 0x8c, 0xc9, 0xa5,
	0x8a, 0xa6, 0x23, 0x93, 0x51, 0xf0, 0x4d, 0xfa, 0x48, 0x5d, 0xf6, 0x11, 0x8a, 0x7d, 0x91, 0x32,
	0x33, 0x69, 0x8c, 0x85, 0x8f, 0x0f, 0x3e, 0xbe, 0xdd, 0x39, 0x73, 0xe7, 0xdc, 0x39, 0xf7, 0x5c,
	0x06, 0xc2, 0x92, 0xc9, 0x7c, 0xf3, 0x55, 0x70, 0x5e, 0x4e, 0x0f, 0x82, 0x4b, 0x9e, 0xee, 0x01,
	0xde, 0x0a, 0x64, 0x12, 0x33, 0xce, 0x4b, 0x3a, 0x04, 0xef, 0x1b, 0x2b, 0x71, 0x5e, 0x44, 0x24,
	0x21, 0x63, 0x37, 0xab, 0x19, 0x1d, 0x81, 0xaf, 0xd0, 0x67, 0x5e, 0x60, 0x64, 0xe9, 0x4a, 0xc3,
	0x95, 0x46, 0xf5, 0x9b, 0x17, 0x91, 0x9d, 0x90, 0xb1, 0x9d, 0xd5, 0x8c, 0x52, 0x70, 0x0a, 0x26,
	0x59, 0xe4, 0x24, 0x64, 0x1c, 0x64, 0x1a, 0xa7, 0x2f, 0xc1, 0xff, 0xb8, 0xcd, 0x77, 0xcb, 0x0a,
	0x45, 0x4b, 0x47, 0x6e, 0x74, 0x43, 0xf0, 0x8e, 0x15, 0x8a, 0x79, 0xa1, 0x5f, 0xb2, 0xb3, 0x9a,
	0xa5, 0x02, 0x06, 0xcb, 0x43, 0x51, 0x3b, 0x5d, 0xa0, 0x38, 0x6d, 0x73, 0xa4, 0x09, 0x74, 0x2b,
	0x03, 0xbf, 0xb0, 0x12, 0x75, 0xa7, 0x20, 0x6b, 0x1f, 0xd1, 0x67, 0xe0, 0x56, 0x92, 0x49, 0xe3,
	0xbb, 0xff, 0x7c, 0x30, 0x6d, 0xc9, 0x17, 0xaa, 0x90, 0x99, 0x7a, 0xe3, 0xd7, 0x6e, 0xf9, 0x5d,
	0x42, 0x4f, 0x79, 0x7d, 0xff, 0x5d, 0xa2, 0xf8, 0x17, 0x50, 0x6d, 0x8e, 0xb4, 0xcd, 0xb5, 0x86,
	0xb1, 0x6e, 0x86, 0x79, 0x0a, 0x2e, 0x0a, 0xc1, 0x45, 0x9d, 0x8d, 0x21, 0xe9, 0x1b, 0xd3, 0xf6,
	0x13, 0xb2, 0x13, 0x3e, 0xa4, 0x6d, 0x2a, 0xa0, 0x7f, 0xdd, 0xda, 0x8c, 0xe5, 0xbb, 0x47, 0xdd,
	0x5c, 0x63, 0xda, 0xd1, 0x82, 0xda, 0xf4, 0x0a, 0xe0, 0x9a, 0xff, 0x9d, 0xdb, 0x4b, 0x6e, 0xe3,
	0x06, 0x13, 0xf7, 0x3d, 0x39, 0x4f, 0x5e, 0x43, 0xf8, 0xff, 0x5a, 0xa8, 0x0f, 0xce, 0x9e, 0xb3,
	0x22, 0xec, 0x50, 0x00, 0x4f, 0xa0, 0xc6, 0x84, 0x06, 0xe0, 0x6e, 0x90, 0x09, 0x19, 0x5a, 0xea,
	0xc2, 0xfa, 0x58, 0x9d, 0x43, 0x7b, 0xf2, 0x0a, 0x82, 0xe6, 0x19, 0xda, 0x33, 0xe4, 0x83, 0xbe,
	0xd5, 0xa1, 0x4f, 0xa0, 0xab, 0xe8, 0x3b, 0xac, 0xa4, 0xe0, 0xe7, 0x90, 0xd0, 0x3e, 0x80, 0x3a,
	0x30, 0xb3, 0x84, 0xd6, 0x6c, 0xf4, 0xf3, 0x12, 0x93, 0x5f, 0x97, 0x98, 0xfc, 0xbe, 0xc4, 0xe4,
	0xc7, 0x9f, 0xb8, 0xb3, 0xf2, 0xf5, 0xd7, 0xc8, 0xf9, 0x7e, 0xed, 0x69, 0xf4, 0xe2, 0x6f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x2a, 0xe8, 0x05, 0x08, 0x38, 0x03, 0x00, 0x00,
}

func (m *CreateRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateRoom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateRoom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintMatchRoom(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x22
	}
	if m.RoomId != 0 {
		i = encodeVarintMatchRoom(dAtA, i, uint64(m.RoomId))
		i--
		dAtA[i] = 0x18
	}
	if m.GameMode != 0 {
		i = encodeVarintMatchRoom(dAtA, i, uint64(m.GameMode))
		i--
		dAtA[i] = 0x10
	}
	if m.GameId != 0 {
		i = encodeVarintMatchRoom(dAtA, i, uint64(m.GameId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *KickUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KickUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KickUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UserId != 0 {
		i = encodeVarintMatchRoom(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x10
	}
	if m.RoomId != 0 {
		i = encodeVarintMatchRoom(dAtA, i, uint64(m.RoomId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateRoomService) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateRoomService) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateRoomService) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintMatchRoom(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x1a
	}
	if m.State != 0 {
		i = encodeVarintMatchRoom(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ServiceName) > 0 {
		i -= len(m.ServiceName)
		copy(dAtA[i:], m.ServiceName)
		i = encodeVarintMatchRoom(dAtA, i, uint64(len(m.ServiceName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserEnterRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserEnterRoom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserEnterRoom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Error != 0 {
		i = encodeVarintMatchRoom(dAtA, i, uint64(m.Error))
		i--
		dAtA[i] = 0x18
	}
	if m.RoomId != 0 {
		i = encodeVarintMatchRoom(dAtA, i, uint64(m.RoomId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintMatchRoom(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserLeaveRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserLeaveRoom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserLeaveRoom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoomId != 0 {
		i = encodeVarintMatchRoom(dAtA, i, uint64(m.RoomId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintMatchRoom(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateRoomBack) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateRoomBack) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateRoomBack) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Error != 0 {
		i = encodeVarintMatchRoom(dAtA, i, uint64(m.Error))
		i--
		dAtA[i] = 0x20
	}
	if m.RoomId != 0 {
		i = encodeVarintMatchRoom(dAtA, i, uint64(m.RoomId))
		i--
		dAtA[i] = 0x18
	}
	if m.GameMode != 0 {
		i = encodeVarintMatchRoom(dAtA, i, uint64(m.GameMode))
		i--
		dAtA[i] = 0x10
	}
	if m.GameId != 0 {
		i = encodeVarintMatchRoom(dAtA, i, uint64(m.GameId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateRoom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateRoom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintMatchRoom(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x1a
	}
	if m.State != 0 {
		i = encodeVarintMatchRoom(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x10
	}
	if m.RoomId != 0 {
		i = encodeVarintMatchRoom(dAtA, i, uint64(m.RoomId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMatchRoom(dAtA []byte, offset int, v uint64) int {
	offset -= sovMatchRoom(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CreateRoom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameId != 0 {
		n += 1 + sovMatchRoom(uint64(m.GameId))
	}
	if m.GameMode != 0 {
		n += 1 + sovMatchRoom(uint64(m.GameMode))
	}
	if m.RoomId != 0 {
		n += 1 + sovMatchRoom(uint64(m.RoomId))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovMatchRoom(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *KickUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoomId != 0 {
		n += 1 + sovMatchRoom(uint64(m.RoomId))
	}
	if m.UserId != 0 {
		n += 1 + sovMatchRoom(uint64(m.UserId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateRoomService) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServiceName)
	if l > 0 {
		n += 1 + l + sovMatchRoom(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovMatchRoom(uint64(m.State))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovMatchRoom(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserEnterRoom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMatchRoom(uint64(m.UserId))
	}
	if m.RoomId != 0 {
		n += 1 + sovMatchRoom(uint64(m.RoomId))
	}
	if m.Error != 0 {
		n += 1 + sovMatchRoom(uint64(m.Error))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserLeaveRoom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMatchRoom(uint64(m.UserId))
	}
	if m.RoomId != 0 {
		n += 1 + sovMatchRoom(uint64(m.RoomId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateRoomBack) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameId != 0 {
		n += 1 + sovMatchRoom(uint64(m.GameId))
	}
	if m.GameMode != 0 {
		n += 1 + sovMatchRoom(uint64(m.GameMode))
	}
	if m.RoomId != 0 {
		n += 1 + sovMatchRoom(uint64(m.RoomId))
	}
	if m.Error != 0 {
		n += 1 + sovMatchRoom(uint64(m.Error))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateRoom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoomId != 0 {
		n += 1 + sovMatchRoom(uint64(m.RoomId))
	}
	if m.State != 0 {
		n += 1 + sovMatchRoom(uint64(m.State))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovMatchRoom(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMatchRoom(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMatchRoom(x uint64) (n int) {
	return sovMatchRoom(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CreateRoom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatchRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatchRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameMode", wireType)
			}
			m.GameMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatchRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameMode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatchRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatchRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMatchRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMatchRoom
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMatchRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatchRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KickUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatchRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KickUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KickUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatchRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatchRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMatchRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatchRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateRoomService) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatchRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateRoomService: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateRoomService: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatchRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMatchRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMatchRoom
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatchRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= RoomServiceState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatchRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMatchRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMatchRoom
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMatchRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatchRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserEnterRoom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatchRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserEnterRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserEnterRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatchRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatchRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatchRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMatchRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatchRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserLeaveRoom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatchRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserLeaveRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserLeaveRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatchRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatchRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMatchRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatchRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateRoomBack) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatchRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateRoomBack: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateRoomBack: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatchRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameMode", wireType)
			}
			m.GameMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatchRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameMode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatchRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatchRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMatchRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatchRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateRoom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatchRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatchRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatchRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= RoomState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatchRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMatchRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMatchRoom
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMatchRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatchRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMatchRoom(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMatchRoom
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMatchRoom
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMatchRoom
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMatchRoom
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMatchRoom
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMatchRoom
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMatchRoom        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMatchRoom          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMatchRoom = fmt.Errorf("proto: unexpected end of group")
)
